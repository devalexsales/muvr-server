logging {
  level = INFO

  # Log dead letters
  dead-letters = on

  # Log all LoggingFSMs for events, transitions and timers (using akka.actor.LoggingFSM[StateType, Data])
  fsm = on

  # Logging of message invocations on certain (local) actors (using akka.event.LoggingReceive)
  receive = on

  # Log unhandled actor messages
  unhandled = on

  # Log cluster informational messages
  cluster = off

  # Log all inbound and outbound messages to remote actors
  remote = off
}

akka {
  loglevel = ${logging.level}
  log-dead-letters = ${logging.dead-letters}
  # extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension"]

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    debug {
      fsm = ${logging.fsm}
      receive = ${logging.receive}
      unhandled = ${logging.unhandled}
    }

    serialization-bindings {
      "io.muvr.exercise.ExercisePlanDeviation" = java,
      "io.muvr.exercise.ResistanceExercise" = java,
      "io.muvr.exercise.ResistanceExerciseSet" = java,
      "io.muvr.exercise.ResistanceExerciseSetExample" = java,
      "io.muvr.exercise.EntireResistanceExerciseSession" = java,
      "io.muvr.exercise.ResistanceExerciseSession" = java,
      "io.muvr.exercise.Rest" = java,
      "io.muvr.exercise.SessionId" =java
    }

    serializers {
      java = "akka.serialization.JavaSerializer"
    }

  }

  remote {
    log-remote-lifecycle-events = off
    log-sent-messages = ${logging.remote}
    log-received-messages = ${logging.remote}
    log-remote-lifecycle-events = ${logging.remote}
    netty.tcp {
      hostname = "127.0.0.1"
      port = 0
    }
  }

  cluster {
    log-info = ${logging.cluster}
    seed-nodes = [
      "akka.tcp://Muvr@127.0.0.1:2551",
      "akka.tcp://Muvr@127.0.0.1:2552"
    ]
    jvm-ports = [2551, 2552, 2553, 2554]

    auto-down-unreachable-after = 10s
  }

#  persistence {
#    journal.plugin = "akka.persistence.journal.leveldb-shared"
#    journal.leveldb-shared.store {
#      native = off
#      dir = "target/shared-journal"
#    }
#    snapshot-store.local.dir = "target/snapshots"
#  }

  persistence {
    journal.plugin = "cassandra-journal"
    snapshot-store.plugin = "cassandra-snapshot-store"
  }

  remote.netty.tcp.maximum-frame-size = 10000KiB
}

cassandra-journal {
  contact-points = ["127.0.0.1"]
}

cassandra-snapshot-store {
  contact-points = ["127.0.0.1"]
}

prover.cvc.library = "/usr/lib/jni/libcvc4jni.so"

spray.can {
  server {
    request-chunk-aggregation-limit = 10m
  }

  parsing {
    # The limits for the various parts of the HTTP message parser.
    max-uri-length = 2k
    max-response-reason-length = 64
    max-header-name-length = 64
    max-header-value-length = 8k
    max-header-count = 64
    max-content-length = 10m
    max-chunk-ext-length = 256
    max-chunk-size = 10m
  }
}
